Grammar:

Rule 0     S' -> ex
Rule 1     ex -> ex IMP ex  [precedence=left, level=2]
Rule 2     ex -> ex IFF ex  [precedence=left, level=1]
Rule 3     ex -> ex XOR ex  [precedence=left, level=3]
Rule 4     ex -> ex OR ex  [precedence=left, level=3]
Rule 5     ex -> ex AND ex  [precedence=left, level=4]
Rule 6     ex -> NOT ex  [precedence=right, level=5]
Rule 7     ex -> ( ex )
Rule 8     ex -> BOT
Rule 9     ex -> TOP
Rule 10    ex -> NAME

Terminals, with rules where they appear:

(                    : 7
)                    : 7
AND                  : 5
BOT                  : 8
IFF                  : 2
IMP                  : 1
NAME                 : 10
NOT                  : 6
OR                   : 4
TOP                  : 9
XOR                  : 3
error                : 

Nonterminals, with rules where they appear:

ex                   : 1 1 2 2 3 3 4 4 5 5 6 7 0


state 0

    (0) S' -> . ex
    (1) ex -> . ex IMP ex
    (2) ex -> . ex IFF ex
    (3) ex -> . ex XOR ex
    (4) ex -> . ex OR ex
    (5) ex -> . ex AND ex
    (6) ex -> . NOT ex
    (7) ex -> . ( ex )
    (8) ex -> . BOT
    (9) ex -> . TOP
    (10) ex -> . NAME
    NOT             shift and go to state 2
    (               shift and go to state 3
    BOT             shift and go to state 4
    TOP             shift and go to state 5
    NAME            shift and go to state 6

    ex                             shift and go to state 1

state 1

    (0) S' -> ex .
    (1) ex -> ex . IMP ex
    (2) ex -> ex . IFF ex
    (3) ex -> ex . XOR ex
    (4) ex -> ex . OR ex
    (5) ex -> ex . AND ex
    IMP             shift and go to state 7
    IFF             shift and go to state 8
    XOR             shift and go to state 9
    OR              shift and go to state 10
    AND             shift and go to state 11


state 2

    (6) ex -> NOT . ex
    (1) ex -> . ex IMP ex
    (2) ex -> . ex IFF ex
    (3) ex -> . ex XOR ex
    (4) ex -> . ex OR ex
    (5) ex -> . ex AND ex
    (6) ex -> . NOT ex
    (7) ex -> . ( ex )
    (8) ex -> . BOT
    (9) ex -> . TOP
    (10) ex -> . NAME
    NOT             shift and go to state 2
    (               shift and go to state 3
    BOT             shift and go to state 4
    TOP             shift and go to state 5
    NAME            shift and go to state 6

    ex                             shift and go to state 12

state 3

    (7) ex -> ( . ex )
    (1) ex -> . ex IMP ex
    (2) ex -> . ex IFF ex
    (3) ex -> . ex XOR ex
    (4) ex -> . ex OR ex
    (5) ex -> . ex AND ex
    (6) ex -> . NOT ex
    (7) ex -> . ( ex )
    (8) ex -> . BOT
    (9) ex -> . TOP
    (10) ex -> . NAME
    NOT             shift and go to state 2
    (               shift and go to state 3
    BOT             shift and go to state 4
    TOP             shift and go to state 5
    NAME            shift and go to state 6

    ex                             shift and go to state 13

state 4

    (8) ex -> BOT .
    IMP             reduce using rule 8 (ex -> BOT .)
    IFF             reduce using rule 8 (ex -> BOT .)
    XOR             reduce using rule 8 (ex -> BOT .)
    OR              reduce using rule 8 (ex -> BOT .)
    AND             reduce using rule 8 (ex -> BOT .)
    $end            reduce using rule 8 (ex -> BOT .)
    )               reduce using rule 8 (ex -> BOT .)


state 5

    (9) ex -> TOP .
    IMP             reduce using rule 9 (ex -> TOP .)
    IFF             reduce using rule 9 (ex -> TOP .)
    XOR             reduce using rule 9 (ex -> TOP .)
    OR              reduce using rule 9 (ex -> TOP .)
    AND             reduce using rule 9 (ex -> TOP .)
    $end            reduce using rule 9 (ex -> TOP .)
    )               reduce using rule 9 (ex -> TOP .)


state 6

    (10) ex -> NAME .
    IMP             reduce using rule 10 (ex -> NAME .)
    IFF             reduce using rule 10 (ex -> NAME .)
    XOR             reduce using rule 10 (ex -> NAME .)
    OR              reduce using rule 10 (ex -> NAME .)
    AND             reduce using rule 10 (ex -> NAME .)
    $end            reduce using rule 10 (ex -> NAME .)
    )               reduce using rule 10 (ex -> NAME .)


state 7

    (1) ex -> ex IMP . ex
    (1) ex -> . ex IMP ex
    (2) ex -> . ex IFF ex
    (3) ex -> . ex XOR ex
    (4) ex -> . ex OR ex
    (5) ex -> . ex AND ex
    (6) ex -> . NOT ex
    (7) ex -> . ( ex )
    (8) ex -> . BOT
    (9) ex -> . TOP
    (10) ex -> . NAME
    NOT             shift and go to state 2
    (               shift and go to state 3
    BOT             shift and go to state 4
    TOP             shift and go to state 5
    NAME            shift and go to state 6

    ex                             shift and go to state 14

state 8

    (2) ex -> ex IFF . ex
    (1) ex -> . ex IMP ex
    (2) ex -> . ex IFF ex
    (3) ex -> . ex XOR ex
    (4) ex -> . ex OR ex
    (5) ex -> . ex AND ex
    (6) ex -> . NOT ex
    (7) ex -> . ( ex )
    (8) ex -> . BOT
    (9) ex -> . TOP
    (10) ex -> . NAME
    NOT             shift and go to state 2
    (               shift and go to state 3
    BOT             shift and go to state 4
    TOP             shift and go to state 5
    NAME            shift and go to state 6

    ex                             shift and go to state 15

state 9

    (3) ex -> ex XOR . ex
    (1) ex -> . ex IMP ex
    (2) ex -> . ex IFF ex
    (3) ex -> . ex XOR ex
    (4) ex -> . ex OR ex
    (5) ex -> . ex AND ex
    (6) ex -> . NOT ex
    (7) ex -> . ( ex )
    (8) ex -> . BOT
    (9) ex -> . TOP
    (10) ex -> . NAME
    NOT             shift and go to state 2
    (               shift and go to state 3
    BOT             shift and go to state 4
    TOP             shift and go to state 5
    NAME            shift and go to state 6

    ex                             shift and go to state 16

state 10

    (4) ex -> ex OR . ex
    (1) ex -> . ex IMP ex
    (2) ex -> . ex IFF ex
    (3) ex -> . ex XOR ex
    (4) ex -> . ex OR ex
    (5) ex -> . ex AND ex
    (6) ex -> . NOT ex
    (7) ex -> . ( ex )
    (8) ex -> . BOT
    (9) ex -> . TOP
    (10) ex -> . NAME
    NOT             shift and go to state 2
    (               shift and go to state 3
    BOT             shift and go to state 4
    TOP             shift and go to state 5
    NAME            shift and go to state 6

    ex                             shift and go to state 17

state 11

    (5) ex -> ex AND . ex
    (1) ex -> . ex IMP ex
    (2) ex -> . ex IFF ex
    (3) ex -> . ex XOR ex
    (4) ex -> . ex OR ex
    (5) ex -> . ex AND ex
    (6) ex -> . NOT ex
    (7) ex -> . ( ex )
    (8) ex -> . BOT
    (9) ex -> . TOP
    (10) ex -> . NAME
    NOT             shift and go to state 2
    (               shift and go to state 3
    BOT             shift and go to state 4
    TOP             shift and go to state 5
    NAME            shift and go to state 6

    ex                             shift and go to state 18

state 12

    (6) ex -> NOT ex .
    (1) ex -> ex . IMP ex
    (2) ex -> ex . IFF ex
    (3) ex -> ex . XOR ex
    (4) ex -> ex . OR ex
    (5) ex -> ex . AND ex
    IMP             reduce using rule 6 (ex -> NOT ex .)
    IFF             reduce using rule 6 (ex -> NOT ex .)
    XOR             reduce using rule 6 (ex -> NOT ex .)
    OR              reduce using rule 6 (ex -> NOT ex .)
    AND             reduce using rule 6 (ex -> NOT ex .)
    $end            reduce using rule 6 (ex -> NOT ex .)
    )               reduce using rule 6 (ex -> NOT ex .)


state 13

    (7) ex -> ( ex . )
    (1) ex -> ex . IMP ex
    (2) ex -> ex . IFF ex
    (3) ex -> ex . XOR ex
    (4) ex -> ex . OR ex
    (5) ex -> ex . AND ex
    )               shift and go to state 19
    IMP             shift and go to state 7
    IFF             shift and go to state 8
    XOR             shift and go to state 9
    OR              shift and go to state 10
    AND             shift and go to state 11


state 14

    (1) ex -> ex IMP ex .
    (1) ex -> ex . IMP ex
    (2) ex -> ex . IFF ex
    (3) ex -> ex . XOR ex
    (4) ex -> ex . OR ex
    (5) ex -> ex . AND ex
    IMP             reduce using rule 1 (ex -> ex IMP ex .)
    IFF             reduce using rule 1 (ex -> ex IMP ex .)
    $end            reduce using rule 1 (ex -> ex IMP ex .)
    )               reduce using rule 1 (ex -> ex IMP ex .)
    XOR             shift and go to state 9
    OR              shift and go to state 10
    AND             shift and go to state 11


state 15

    (2) ex -> ex IFF ex .
    (1) ex -> ex . IMP ex
    (2) ex -> ex . IFF ex
    (3) ex -> ex . XOR ex
    (4) ex -> ex . OR ex
    (5) ex -> ex . AND ex
    IFF             reduce using rule 2 (ex -> ex IFF ex .)
    $end            reduce using rule 2 (ex -> ex IFF ex .)
    )               reduce using rule 2 (ex -> ex IFF ex .)
    IMP             shift and go to state 7
    XOR             shift and go to state 9
    OR              shift and go to state 10
    AND             shift and go to state 11


state 16

    (3) ex -> ex XOR ex .
    (1) ex -> ex . IMP ex
    (2) ex -> ex . IFF ex
    (3) ex -> ex . XOR ex
    (4) ex -> ex . OR ex
    (5) ex -> ex . AND ex
    IMP             reduce using rule 3 (ex -> ex XOR ex .)
    IFF             reduce using rule 3 (ex -> ex XOR ex .)
    XOR             reduce using rule 3 (ex -> ex XOR ex .)
    OR              reduce using rule 3 (ex -> ex XOR ex .)
    $end            reduce using rule 3 (ex -> ex XOR ex .)
    )               reduce using rule 3 (ex -> ex XOR ex .)
    AND             shift and go to state 11


state 17

    (4) ex -> ex OR ex .
    (1) ex -> ex . IMP ex
    (2) ex -> ex . IFF ex
    (3) ex -> ex . XOR ex
    (4) ex -> ex . OR ex
    (5) ex -> ex . AND ex
    IMP             reduce using rule 4 (ex -> ex OR ex .)
    IFF             reduce using rule 4 (ex -> ex OR ex .)
    XOR             reduce using rule 4 (ex -> ex OR ex .)
    OR              reduce using rule 4 (ex -> ex OR ex .)
    $end            reduce using rule 4 (ex -> ex OR ex .)
    )               reduce using rule 4 (ex -> ex OR ex .)
    AND             shift and go to state 11


state 18

    (5) ex -> ex AND ex .
    (1) ex -> ex . IMP ex
    (2) ex -> ex . IFF ex
    (3) ex -> ex . XOR ex
    (4) ex -> ex . OR ex
    (5) ex -> ex . AND ex
    IMP             reduce using rule 5 (ex -> ex AND ex .)
    IFF             reduce using rule 5 (ex -> ex AND ex .)
    XOR             reduce using rule 5 (ex -> ex AND ex .)
    OR              reduce using rule 5 (ex -> ex AND ex .)
    AND             reduce using rule 5 (ex -> ex AND ex .)
    $end            reduce using rule 5 (ex -> ex AND ex .)
    )               reduce using rule 5 (ex -> ex AND ex .)


state 19

    (7) ex -> ( ex ) .
    IMP             reduce using rule 7 (ex -> ( ex ) .)
    IFF             reduce using rule 7 (ex -> ( ex ) .)
    XOR             reduce using rule 7 (ex -> ( ex ) .)
    OR              reduce using rule 7 (ex -> ( ex ) .)
    AND             reduce using rule 7 (ex -> ( ex ) .)
    $end            reduce using rule 7 (ex -> ( ex ) .)
    )               reduce using rule 7 (ex -> ( ex ) .)
